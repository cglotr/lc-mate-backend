// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	leetcode "github.com/cglotr/lc-mate-backend/leetcode"
	gomock "github.com/golang/mock/gomock"
)

// UserServiceMock is a mock of UserService interface.
type UserServiceMock struct {
	ctrl     *gomock.Controller
	recorder *UserServiceMockMockRecorder
}

// UserServiceMockMockRecorder is the mock recorder for UserServiceMock.
type UserServiceMockMockRecorder struct {
	mock *UserServiceMock
}

// NewUserServiceMock creates a new mock instance.
func NewUserServiceMock(ctrl *gomock.Controller) *UserServiceMock {
	mock := &UserServiceMock{ctrl: ctrl}
	mock.recorder = &UserServiceMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *UserServiceMock) EXPECT() *UserServiceMockMockRecorder {
	return m.recorder
}

// GetUsers mocks base method.
func (m *UserServiceMock) GetUsers(usernames []string) ([]*leetcode.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", usernames)
	ret0, _ := ret[0].([]*leetcode.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *UserServiceMockMockRecorder) GetUsers(usernames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*UserServiceMock)(nil).GetUsers), usernames)
}

// UpdateMostOutdatedUser mocks base method.
func (m *UserServiceMock) UpdateMostOutdatedUser() (*leetcode.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMostOutdatedUser")
	ret0, _ := ret[0].(*leetcode.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMostOutdatedUser indicates an expected call of UpdateMostOutdatedUser.
func (mr *UserServiceMockMockRecorder) UpdateMostOutdatedUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMostOutdatedUser", reflect.TypeOf((*UserServiceMock)(nil).UpdateMostOutdatedUser))
}
