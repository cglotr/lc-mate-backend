// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_dao.go

// Package dao is a generated GoMock package.
package dao

import (
	reflect "reflect"

	model "github.com/cglotr/lc-mate-backend/model"
	gomock "github.com/golang/mock/gomock"
)

// UserDaoMock is a mock of UserDao interface.
type UserDaoMock struct {
	ctrl     *gomock.Controller
	recorder *UserDaoMockMockRecorder
}

// UserDaoMockMockRecorder is the mock recorder for UserDaoMock.
type UserDaoMockMockRecorder struct {
	mock *UserDaoMock
}

// NewUserDaoMock creates a new mock instance.
func NewUserDaoMock(ctrl *gomock.Controller) *UserDaoMock {
	mock := &UserDaoMock{ctrl: ctrl}
	mock.recorder = &UserDaoMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *UserDaoMock) EXPECT() *UserDaoMockMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *UserDaoMock) DeleteUser(username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *UserDaoMockMockRecorder) DeleteUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*UserDaoMock)(nil).DeleteUser), username)
}

// OutdateUser mocks base method.
func (m *UserDaoMock) OutdateUser(username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdateUser", username)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdateUser indicates an expected call of OutdateUser.
func (mr *UserDaoMockMockRecorder) OutdateUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdateUser", reflect.TypeOf((*UserDaoMock)(nil).OutdateUser), username)
}

// QueryMostOutdatedUser mocks base method.
func (m *UserDaoMock) QueryMostOutdatedUser() (*model.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMostOutdatedUser")
	ret0, _ := ret[0].(*model.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMostOutdatedUser indicates an expected call of QueryMostOutdatedUser.
func (mr *UserDaoMockMockRecorder) QueryMostOutdatedUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMostOutdatedUser", reflect.TypeOf((*UserDaoMock)(nil).QueryMostOutdatedUser))
}

// QueryUsers mocks base method.
func (m *UserDaoMock) QueryUsers(usernames []string) ([]*model.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUsers", usernames)
	ret0, _ := ret[0].([]*model.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUsers indicates an expected call of QueryUsers.
func (mr *UserDaoMockMockRecorder) QueryUsers(usernames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUsers", reflect.TypeOf((*UserDaoMock)(nil).QueryUsers), usernames)
}

// Upsert mocks base method.
func (m *UserDaoMock) Upsert(user *model.UserModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *UserDaoMockMockRecorder) Upsert(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*UserDaoMock)(nil).Upsert), user)
}
