// Code generated by MockGen. DO NOT EDIT.
// Source: ./leetcode_api.go

// Package leetcode is a generated GoMock package.
package leetcode

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// LeetcodeApiMock is a mock of LeetcodeApi interface.
type LeetcodeApiMock struct {
	ctrl     *gomock.Controller
	recorder *LeetcodeApiMockMockRecorder
}

// LeetcodeApiMockMockRecorder is the mock recorder for LeetcodeApiMock.
type LeetcodeApiMockMockRecorder struct {
	mock *LeetcodeApiMock
}

// NewLeetcodeApiMock creates a new mock instance.
func NewLeetcodeApiMock(ctrl *gomock.Controller) *LeetcodeApiMock {
	mock := &LeetcodeApiMock{ctrl: ctrl}
	mock.recorder = &LeetcodeApiMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *LeetcodeApiMock) EXPECT() *LeetcodeApiMockMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *LeetcodeApiMock) GetUserInfo(username string) (*UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", username)
	ret0, _ := ret[0].(*UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *LeetcodeApiMockMockRecorder) GetUserInfo(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*LeetcodeApiMock)(nil).GetUserInfo), username)
}
